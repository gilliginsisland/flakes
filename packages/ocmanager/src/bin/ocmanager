#!/bin/bash
set -Eeuo pipefail

PROGRAM=$(basename "${BASH_SOURCE[0]%.*}")

export SSO_BROWSER="@SELF@/lib/ocmanager/sso-browser"
export CSD_POST="@SELF@/lib/ocmanager/csd-post"
export CSD_WRAPPER="@OPENCONNECT@/libexec/openconnect/csd-wrapper.sh"
export HIPREPORT_ANDROID="@OPENCONNECT@/libexec/openconnect/hipreport-android.sh"
export HIPREPORT="@OPENCONNECT@/libexec/openconnect/hipreport.sh"
export OCPROXY="@OCPROXY@/bin/ocproxy"

OPENSSL="@OPENSSL@/bin/openssl"
CURL="@CURL@/bin/curl"
BASENAME="@COREUTILS@/bin/basename"

usage() {
	builtin echo "script usage: $(basename $0) [-t] -c config_file"
}

notify() {
	'@TERMINAL_NOTIFIER@/bin/terminal-notifier' \
		-appIcon /System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/GenericNetworkIcon.icns \
		-title "${PROGRAM}" -subtitle "${PROFILE}" \
		-group "${PROFILE}-$1" -ignoreDnD
}

die() {
	if [ $# -gt 0 ]; then
		echo "Error: $1" 1>&2
	fi
	exit 1
}

## opts
while getopts 'c:th' OPTION; do
	case "$OPTION" in
		c) CONFIG_FILE="$OPTARG" ;;
		t) TOKEN_MODE="yubiotp" ;;
		h) usage; exit 0 ;;
		?) usage >&2; exit 1 ;;
	esac
done
shift "$(($OPTIND -1))"

if [[ -z "${CONFIG_FILE-}" ]]; then
	die "$(usage)"
fi

if [[ ! -f "$CONFIG_FILE" ]]; then
	die "Config file not found: $CONFIG_FILE"
fi

PROFILE=$("$BASENAME" "$CONFIG_FILE")
CONFIG=$('@ENVSUBST@/bin/envsubst' -no-unset -no-empty < "$CONFIG_FILE")
KEYCHAIN_ACCOUNT="ocmanager:${PROFILE}"

getSecureInput() {
	local message="$1"
	'@OSASCRIPT@/bin/osascript' <<-EOF || die
		set icn to path to resource "GenericNetworkIcon.icns" in bundle file ((path to "csrv" as Unicode text) & "CoreTypes.bundle")
		set passwordPrompt to display dialog "${message}" default answer "" with icon icn buttons {"Cancel", "Continue"} default button "Continue" with title "OCManager" with hidden answer
		get text returned of passwordPrompt
	EOF
}

getPasswordInput() {
	local message="$1"
	getSecureInput "${message}\n\nPassword for ${PROFILE}"
}

getPasswordKeychain() {
	'@SECURITY@/bin/security' find-generic-password -a "$KEYCHAIN_ACCOUNT" -w -s "$KEYCHAIN_ACCOUNT"
}

savePasswordKeychain() {
	local password="$1"
	'@SECURITY@/bin/security' add-generic-password -U -a "$KEYCHAIN_ACCOUNT" -w "$password" -s "$KEYCHAIN_ACCOUNT"
}

getPassword() {
	local password

	until password="$(getPasswordKeychain)"; do
		notify "error" <<< "No Credentials In Keychain"
		password=$(getPasswordInput "No Credentials In Keychain") || die
		savePasswordKeychain "$password"
	done

	echo -en "$password"
	if [ "${TOKEN_MODE-}" == "yubiotp" ]; then
		getSecureInput "Touch YubiKey for ${PROFILE}" || die "Failed to get yubikey token"
	fi
}

getFingerprint() {
	local server

	while read line; do
		if [[ "$line" =~ ^server=(.*)$ ]]; then
			server=${BASH_REMATCH[1]}
			break
		fi
	done <<< "${CONFIG}"

	"${CURL}" -k -w %{certs} "https://${server}/" --silent -o /dev/null \
		| "${OPENSSL}" x509 -noout -pubkey \
		| "${OPENSSL}" pkey -pubin -outform der \
		| "${OPENSSL}" dgst -sha256 -binary \
		| "${OPENSSL}" enc -base64
}

getAuthCookie() {
	local fingerprint
	fingerprint=$(getFingerprint) || die "Failed to get server fingerprint"

	'@OPENCONNECT@/bin/openconnect' \
		--config <(builtin echo -en "$CONFIG") \
		--servercert="pin-sha256:${fingerprint}" \
		--gnutls-priority="NORMAL:-VERS-ALL:+VERS-TLS1.2:+RSA:+AES-128-CBC:+SHA1" \
		--csd-wrapper="$CSD_POST" \
		--external-browser="$SSO_BROWSER" \
		--passwd-on-stdin \
		--non-inter \
		--authenticate
}

teeFds() {
	local fd1="$1" fd2="$2"
	tee "/dev/fd/$1" >&$2
}

startProxy() {
	local auth_params="" password stderr

	until [ "$auth_params" ]; do
		notify "status" <<< "Authenticating..."
		password="$(getPassword)" || die "Failed to get password"

		{
			auth_params=$({
				stderr=$({
					out=$(getAuthCookie <<< "$password" 2> >(teeFds 2 5)) && echo -en "$out" || die "Auth failure"
				} 5>&1 1>&4) || {
					if [[ "$stderr" != *"Login failed"* ]]; then
						notify "error" <<< "Unknown Authentication failure: ${stderr}"
						die "Unknown Authentication failure"
					fi

					# for login problems we request new credentials
					notify "error" <<< "Invalid Credentials: ${stderr}"
					password=$(getPasswordInput "Incorrect Username / Password combination") || die
					savePasswordKeychain "$password"
				}
			} 4>&1 1>&3)
		} 3>&1 # save real stdout so it accessible even in variable substitution
	done

	notify "status" <<< "Connecting..."
	(
		eval "$auth_params"
		exec '@OPENCONNECT@/bin/openconnect' \
			--config <(builtin echo -en "$CONFIG") \
			--cookie-on-stdin \
			--server "$CONNECT_URL" \
			--servercert "$FINGERPRINT" \
			--gnutls-priority="NORMAL:-VERS-ALL:+VERS-TLS1.2:+RSA:+AES-128-CBC:+SHA1" \
			--resolve "$RESOLVE" \
			<<< "$COOKIE"
	) &
	pid=$!

	notify "status" <<< "Connection Established"
	wait $pid
	notify "status" <<< "Disconnected"
}

startProxy
