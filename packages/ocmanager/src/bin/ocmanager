#!/bin/bash
set -euo pipefail

: ${XDG_CACHE_HOME:="${HOME}/.cache"}
: ${XDG_CONFIG_HOME:="${HOME}/.config"}
: ${XDG_DATA_HOME:="${HOME}/.local/share"}
: ${XDG_STATE_HOME:="${HOME}/.local/state"}

PROGRAM=$(basename "${BASH_SOURCE[0]%.*}")

export CSD_POST="@out@/lib/ocmanager/csd-post"
export CSD_WRAPPER="@openconnect_root@/libexec/openconnect/csd-wrapper.sh"
export HIPREPORT_ANDROID="@openconnect_root@/libexec/openconnect/hipreport-android.sh"
export HIPREPORT="@openconnect_root@/libexec/openconnect/hipreport.sh"
export OCPROXY="@ocproxy_root@/bin/ocproxy"

OPENSSL="@openssl_root@/bin/openssl"
CURL="@curl_root@/bin/curl"

usage() {
	builtin echo "script usage: $(basename $0) [-t] -p profile"
}

## opts
while getopts 'p:th' OPTION; do
	case "$OPTION" in
		p) PROFILE="$OPTARG" ;;
		t) TOKEN_MODE="yubiotp" ;;
		h) usage; exit 0 ;;
		?) usage >&2; exit 1 ;;
	esac
done
shift "$(($OPTIND -1))"

if [[ -z "${PROFILE-}" ]]; then
	usage >&2; exit 1
fi

CONFIG_FILE="${XDG_CONFIG_HOME}/ocmanager/profiles/${PROFILE}.conf"
CONFIG=$('@envsubst_root@/bin/envsubst' -no-unset -no-empty < "$CONFIG_FILE")
KEYCHAIN_ACCOUNT="ocmanager:${PROFILE}"

notify() {
	'@terminal_notifier_root@/bin/terminal-notifier' \
		-appIcon /System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/GenericNetworkIcon.icns \
		-title "${PROGRAM}" -subtitle "${PROFILE}" \
		-group "${PROFILE}-$1" -ignoreDnD
}

getSecureInput() {
	# popup to ask for password
	'@osascript_root@/bin/osascript' <<-EOF
		set icn to path to resource "GenericNetworkIcon.icns" in bundle file ((path to "csrv" as Unicode text) & "CoreTypes.bundle")
		set passwordPrompt to display dialog "$1\n\nPassword for ${PROFILE}" default answer "" with icon icn buttons {"Cancel", "Continue"} default button "Continue" with title "Cisco Openconnect VPN" with hidden answer
		get text returned of passwordPrompt
	EOF
}

getCredentials() {
	local password

	# popup to ask for password
	password="$(getSecureInput "$1")"

	# save password in keychain
	'@security_root@/bin/security' add-generic-password -U -a "$KEYCHAIN_ACCOUNT" -w "$password" -s "$KEYCHAIN_ACCOUNT"
}

getFingerprint() {
	local server

	while read line; do
		if [[ "$line" =~ ^server=(.*)$ ]]; then
			server=${BASH_REMATCH[1]}
			break
		fi
	done <<< "${CONFIG}"

	echo -en "pin-sha256:"

	"${CURL}" -k -w %{certs} "https://${server}/" --silent -o /dev/null \
		| "${OPENSSL}" x509 -noout -pubkey \
		| "${OPENSSL}" pkey -pubin -outform der \
		| "${OPENSSL}" dgst -sha256 -binary \
		| "${OPENSSL}" enc -base64
}

startProxy() {
	local password

	## on first run there wont be a password in the keychain at all
	until password=$(security find-generic-password -a "$KEYCHAIN_ACCOUNT" -w -s "$KEYCHAIN_ACCOUNT"); do
		notify "error" <<< "No Credentials"
		getCredentials "No Credentials In Keychain"
	done

	[ "${TOKEN_MODE-}" == "yubiotp" ] && password="${password}$(getSecureInput "Touch YubiKey")"

	notify "status" <<< "Authenticating..."
	auth_params=$('@openconnect_root@/bin/openconnect' \
		--config <(builtin echo -en "$CONFIG") \
		--servercert=$(getFingerprint) \
		--csd-wrapper="$CSD_POST" \
		--passwd-on-stdin \
		--no-external-auth \
		--non-inter \
		--authenticate \
		<<< "$password")
	eval "$auth_params"

	notify "status" <<< "Connecting..."
	'@openconnect_root@/bin/openconnect' \
		--config <(builtin echo -en "$CONFIG") \
		--cookie-on-stdin \
		--server "$CONNECT_URL" \
		--servercert "$FINGERPRINT" \
		--resolve "$RESOLVE" \
		<<< "$COOKIE" &
	pid=$!

	notify "status" <<< "Connection Established"
	wait $pid
}

until { STDERR=$({ startProxy 1>&3 2> >(tee /dev/fd/4 1>&5); } 5>&1); } 3>&1 4>&2; do
	# for non login failures just quit
	if [[ "$STDERR" != *"Login failed"* ]]; then
		echo "Unknown failure" 1>&2
		notify "error" <<< "Unknown failure: ${STDERR}"
		exit 1
	fi

	# for login problems we request new credentials
	notify "error" <<< "Invalid Credentials: ${STDERR}"
	getCredentials "Incorrect Username / Password combination";
done

notify "status" <<< "Disconnected"

exit 0
